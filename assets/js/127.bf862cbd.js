(window.webpackJsonp=window.webpackJsonp||[]).push([[127],{450:function(t,s,a){"use strict";a.r(s);var n=a(33),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"generator-函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#generator-函数"}},[t._v("#")]),t._v(" Generator 函数")]),t._v(" "),a("p",[t._v("形式上，"),a("code",[t._v("Generator")]),t._v("函数是一个普通函数，有两个特征：")]),t._v(" "),a("ol",[a("li",[a("code",[t._v("function")]),t._v("命令和函数名之间有一个星号")]),t._v(" "),a("li",[t._v("函数体内部使用"),a("code",[t._v("yield")]),t._v("语句定义不同的内部状态。")])]),t._v(" "),a("p",[a("code",[t._v("Generator")]),t._v("函数的调用方法和普通函数一样，也是在函数名后面加上一对圆括号。不同的是，调用"),a("code",[t._v("Generator")]),t._v("函数后，该函数不执行，返回的也不是函数运行结果，而是一个指向内部状态的指针对象。（遍历器对象）。下一步，必须调用遍历器对象的"),a("code",[t._v("next")]),t._v("方法，内部指针就从函数头部或上一次停下来的地方开始执行，直到遇到下一个"),a("code",[t._v("yield")]),t._v("表达式（或"),a("code",[t._v("return")]),t._v("语句）为止。换言之，"),a("code",[t._v("Generator")]),t._v("函数是分段执行的，"),a("code",[t._v("yield")]),t._v("表达式是暂停执行的标记，而"),a("code",[t._v("next")]),t._v("方法可以恢复执行。")]),t._v(" "),a("h2",{attrs:{id:"yield表达式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#yield表达式"}},[t._v("#")]),t._v(" "),a("code",[t._v("yield")]),t._v("表达式")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("x")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" y "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("yield")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" z "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("yield")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("y "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" y "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" z"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" it "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("it"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("next")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => {value: 6, done: false}")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("it"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("next")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("12")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => {value: 8, done: false}")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("it"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("next")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("13")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => {value: 42, done: true}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br")])]),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("第一次调用，"),a("code",[t._v("Generator")]),t._v("函数开始执行，直到遇到第一个"),a("code",[t._v("yield")]),t._v("表达式为止。"),a("code",[t._v("next")]),t._v("方法返回一个对象，它的"),a("code",[t._v("value")]),t._v("属性就是当前"),a("code",[t._v("yield")]),t._v("表达式的值为"),a("code",[t._v("6")]),t._v(","),a("code",[t._v("done")]),t._v("属性的值为"),a("code",[t._v("false")]),t._v("，表示遍历还没有结束。")]),t._v(" "),a("p",[t._v("下一次调用"),a("code",[t._v("next")]),t._v("方法时，再继续往下执行，直到遇到下一个"),a("code",[t._v("yield")]),t._v("表达式。")]),t._v(" "),a("p",[t._v("当执行第二次 "),a("code",[t._v("next")]),t._v(" 时，传入的参数等于上一个 "),a("code",[t._v("yield")]),t._v(" 的返回值，如果你不传参，"),a("code",[t._v("yield")]),t._v(" 永远返回 "),a("code",[t._v("undefined")]),t._v("。此时 "),a("code",[t._v("let y = 2 * 12")]),t._v("，所以第二个 "),a("code",[t._v("yield")]),t._v(" 等于 "),a("code",[t._v("2 * 12 / 3 = 8")])]),t._v(" "),a("p",[t._v("当执行第三次 "),a("code",[t._v("next")]),t._v(" 时，传入的参数会传递给 "),a("code",[t._v("z")]),t._v("，所以 "),a("code",[t._v("z = 13, x = 5, y = 24")]),t._v("，相加等于 "),a("code",[t._v("42")])]),t._v(" "),a("p",[t._v("如果没有遇到新的"),a("code",[t._v("yield")]),t._v("表达式，就一直运行到函数结束，直到"),a("code",[t._v("return")]),t._v("语句为止，并将"),a("code",[t._v("return")]),t._v("语句后面的表达式的值，作为返回对象的"),a("code",[t._v("value")]),t._v("属性值。")]),t._v(" "),a("p",[t._v("如果该函数没有"),a("code",[t._v("return")]),t._v("语句，则返回的对象"),a("code",[t._v("value")]),t._v("属性值为"),a("code",[t._v("undefined")])])]),t._v(" "),a("blockquote",[a("p",[a("code",[t._v("yield")]),t._v("表达式与"),a("code",[t._v("return")]),t._v("语句既有相似之处，也有区别。相似之处在于，都能返回紧跟在语句后面的那个表达式的值。区别在于每次遇到"),a("code",[t._v("yield")]),t._v("，函数暂停执行，下一次再从该位置继续向后执行，而"),a("code",[t._v("return")]),t._v("语句不具备位置记忆的功能。一个函数里面，只能执行一次（或者说一个）"),a("code",[t._v("return")]),t._v("语句，但是可以执行多次（或者说多个）"),a("code",[t._v("yield")]),t._v("表达式。正常函数只能返回一个值，因为只能执行一次"),a("code",[t._v("return")]),t._v("；"),a("code",[t._v("Generator")]),t._v(" 函数可以返回一系列的值，因为可以有任意多个"),a("code",[t._v("yield")]),t._v("。")])]),t._v(" "),a("h2",{attrs:{id:"注意的点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#注意的点"}},[t._v("#")]),t._v(" 注意的点")]),t._v(" "),a("ol",[a("li",[a("code",[t._v("Generator")]),t._v("函数可以不用"),a("code",[t._v("yield")]),t._v("表达式，这时就变成一个单纯的暂缓执行函数")])]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("f")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'执行了'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" generator "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("f")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setTimeout")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    generator"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("next")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2000")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br")])]),a("blockquote",[a("p",[t._v("上面代码中，函数"),a("code",[t._v("f")]),t._v("如果是普通函数，在为变量"),a("code",[t._v("generator")]),t._v("赋值时就会执行。但是，函数"),a("code",[t._v("f")]),t._v("是一个 "),a("code",[t._v("Generator")]),t._v(" 函数，就变成只有调用"),a("code",[t._v("next")]),t._v("方法时，函数"),a("code",[t._v("f")]),t._v("才会执行。")])]),t._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[a("code",[t._v("yield")]),t._v("表达式只能用在"),a("code",[t._v("Generator")]),t._v("函数里面，用在其他地方都会报错。")]),t._v(" "),a("li",[a("code",[t._v("yield")]),t._v("表达式如果用在另一个表达式之中，必须放在圆括号里。")]),t._v(" "),a("li",[a("code",[t._v("yield")]),t._v("表达式用作函数参数或放在赋值表达式的右边，可以不加括号。")])])])}),[],!1,null,null,null);s.default=e.exports}}]);