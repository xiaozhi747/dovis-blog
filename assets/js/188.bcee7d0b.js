(window.webpackJsonp=window.webpackJsonp||[]).push([[188],{506:function(t,s,a){"use strict";a.r(s);var e=a(33),v=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"模板编译原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#模板编译原理"}},[t._v("#")]),t._v(" 模板编译原理")]),t._v(" "),a("blockquote",[a("p",[t._v("vue提供了模板语法，允许我们声明式地描述状态和"),a("code",[t._v("DOM")]),t._v("之间的绑定关系，然后通过模板来生成真实"),a("code",[t._v("DOM")]),t._v("并将其呈现在用户界面上。在底层实现上，vue会将模板编译成虚拟"),a("code",[t._v("DOM")]),t._v("渲染函数。当应用内部的状态发生变化时，vue可以结合响应式系统，聪明地找出最小数量的组件进行重新渲染以及最少量地进行"),a("code",[t._v("DOM")]),t._v("操作。")])]),t._v(" "),a("p",[t._v("在vue中创建"),a("code",[t._v("Html")]),t._v("并不是只有模板这一种途径，我们既可以手动写渲染函数来创建，也可以使用"),a("code",[t._v("JSX")]),t._v("来创建。渲染函数是创建"),a("code",[t._v("HTML")]),t._v("最原始的方法。"),a("strong",[t._v("模板最终会通过编译转换成渲染函数，渲染函数执行后，会得到一份"),a("code",[t._v("vnode")]),t._v("用于虚拟"),a("code",[t._v("DOM")]),t._v("渲染。所以模板编译其实是配合虚拟"),a("code",[t._v("DOM")]),t._v("进行渲染。")])]),t._v(" "),a("p",[t._v("渲染函数的作用是每次执行它，它就会使用当前最新的状态生成一份新的"),a("code",[t._v("vnode")]),t._v("，然后使用这个"),a("code",[t._v("vnode")]),t._v("进行渲染。")]),t._v(" "),a("h2",{attrs:{id:"将模板编译成渲染函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#将模板编译成渲染函数"}},[t._v("#")]),t._v(" 将模板编译成渲染函数")]),t._v(" "),a("blockquote",[a("p",[t._v("先将模板解析成"),a("code",[t._v("AST")]),t._v("（抽象语法树），然后使用抽象语法树生成渲染函数。")])]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("由于静态节点不需要总是重新渲染，所以生成"),a("code",[t._v("AST")]),t._v("之后，生成渲染函数之前这个阶段，需要做一个操作，那就是遍历一遍抽象语法树，给所有静态节点做一个标记，这样在虚拟"),a("code",[t._v("DOM")]),t._v("\n中更新节点时，如果发现这个节点有标记就不会重新渲染它。")]),t._v(" "),a("p",[a("strong",[t._v("对于 "),a("code",[t._v("Vue")]),t._v(" 组件来说，模板编译只会在组件实例化的时候编译一次，生成渲染函数之后在也不会进行编译。因此，编译对组件的 "),a("code",[t._v("runtime")]),t._v(" 是一种性能损耗。而模板编译的目的仅仅是将"),a("code",[t._v("template")]),t._v("转化为"),a("code",[t._v("render function")]),t._v("，这个过程，正好可以在项目构建的过程中完成，这样可以让实际组件在 "),a("code",[t._v("runtime")]),t._v(" 时直接跳过模板渲染，进而提升性能，这个在项目构建的编译"),a("code",[t._v("template")]),t._v("的过程，就是预编译。")])])]),t._v(" "),a("p",[t._v("所以模板编译大体分为三部分：")]),t._v(" "),a("ul",[a("li",[t._v("将模板解析为"),a("code",[t._v("AST")]),t._v("--解析器")]),t._v(" "),a("li",[t._v("遍历抽象语法树标记静态节点--优化器")]),t._v(" "),a("li",[t._v("使用抽象语法树生成渲染函数--代码生成器")])]),t._v(" "),a("h2",{attrs:{id:"解析器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#解析器"}},[t._v("#")]),t._v(" 解析器")]),t._v(" "),a("p",[t._v("在解析器内部分成很多小解析器：包括过滤器解析器，文本解析器和"),a("code",[t._v("HTML")]),t._v("解析器，然后通过一条主线将这些解析器组装在一起。")]),t._v(" "),a("ul",[a("li",[t._v("过滤器解析器")])]),t._v(" "),a("blockquote",[a("p",[t._v("用来解析过滤器的")])]),t._v(" "),a("ul",[a("li",[t._v("文本解析器")])]),t._v(" "),a("blockquote",[a("p",[t._v("用来解析带变量的文本")])]),t._v(" "),a("ul",[a("li",[a("code",[t._v("HTML")]),t._v("解析器")])]),t._v(" "),a("blockquote",[a("p",[t._v("解析模板，每当解析到"),a("code",[t._v("HTML")]),t._v("标签的开始位置，结束位置，文本或者注释，都会触发钩子函数，然后将相关信息通过参数传递出来。")])]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("主线上做的事情就是监听"),a("code",[t._v("HTML")]),t._v("解析器。每当触发钩子函数时，就生成一个对应的抽象语法树节点。生成抽象语法树前，会根据类型使用不同的方式生成不同抽象语法树。例如，如果是文本节点，就生成文本类型的"),a("code",[t._v("AST")]),t._v("。当解析器不再触发钩子函数时，就说明所有模板都解析完毕，所有类型的节点都在钩子函数中构建完成，即"),a("code",[t._v("AST")]),t._v("构建完成。")])]),t._v(" "),a("h3",{attrs:{id:"解析器内部原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#解析器内部原理"}},[t._v("#")]),t._v(" 解析器内部原理")]),t._v(" "),a("blockquote",[a("p",[t._v("钩子函数"),a("code",[t._v("start")]),t._v("有三个参数，分别是"),a("code",[t._v("tag/attrs/unary")]),t._v("。分别说明标签名，标签的属性和是否是自闭合标签。而文本节点的钩子函数"),a("code",[t._v("chars")]),t._v("和注释节点的钩子函数"),a("code",[t._v("comment")]),t._v("都只有一个参数，只有"),a("code",[t._v("text")]),t._v("。这是因为构建元素节点时需要知道标签名，属性和自闭合标识，而构建注释节点和文本节点只需要知道文本即可。")])]),t._v(" "),a("div",{staticClass:"language-html line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("div")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("h1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    我是林嘉恒\n    "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("h1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("p")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    今年24岁\n    "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("p")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("div")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br")])]),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("这个模板被解析成"),a("code",[t._v("AST")]),t._v("过程需要注意的点：")]),t._v(" "),a("ul",[a("li",[t._v("利用一个栈来记录层级关系")]),t._v(" "),a("li",[t._v("基于"),a("code",[t._v("HTML")]),t._v("解析器的逻辑，我们可以在每次触发钩子函数"),a("code",[t._v("start")]),t._v("时，把当前构建的节点推入栈中；每当触发钩子函数"),a("code",[t._v("end")]),t._v("时就会从栈中弹出一个节点。")]),t._v(" "),a("li",[t._v("这样就可以保证每当触发钩子函数"),a("code",[t._v("start")]),t._v("时，栈中最后一个节点就是当前正在构建的节点的父节点。")]),t._v(" "),a("li",[t._v("模板中开始位置的一些空格，会触发文本节点的钩子函数，在钩子函数里会忽略这些空格。同时会在模板中将这些空格截取掉。")]),t._v(" "),a("li",[t._v("解析到文本节点时，栈中最后一个节点就是其父节点，将文本节点添加到该父节点的子节点中。由于文本节点没有子节点所以文本节点不会被推入到栈中。")]),t._v(" "),a("li",[t._v("栈空时，就得到一个完整的带层级关系的抽象语法树。")])])]),t._v(" "),a("h3",{attrs:{id:"html解析器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#html解析器"}},[t._v("#")]),t._v(" "),a("code",[t._v("HTML")]),t._v("解析器")]),t._v(" "),a("p",[t._v("解析"),a("code",[t._v("HTML")]),t._v("模板的过程就是循环的过程，简单来说就是用"),a("code",[t._v("HTML")]),t._v("模板字符串来循环，每轮循环都从HTML模板中截取一小段字符串，然后重复上述过程，直到HTML模板被截成一个空字符串时循环结束。")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[a("strong",[t._v("那么又是如何在每一轮循环中都知道要截取哪些字符串？")])])]),t._v(" "),a("h3",{attrs:{id:"文本解析器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#文本解析器"}},[t._v("#")]),t._v(" 文本解析器")]),t._v(" "),a("p",[t._v("文本解析器的作用是解析文本。奇怪的是文本不是已经在"),a("code",[t._v("HTML")]),t._v("解析器中被解析出来了么？准确来说文本解析器是对"),a("code",[t._v("HTML")]),t._v("解析器解析出来的文本进行二次加工。因为文本分两种类型，一种是纯文本，另一种是带变量的文本。")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("在vue中我们可以使用变量来填充模板。而"),a("code",[t._v("HTML")]),t._v("解析器在解析文本时，并不会区分文本是否带变量的文本。如果是纯文本不需要进行任何处理；但如果是带变量的文本，那么需要使用文本解析器进一步解析。因为带变量的文本在使用虚拟"),a("code",[t._v("DOM")]),t._v("进行渲染时，需要将变量替换成变量的值。")]),t._v(" "),a("p",[t._v("在文本解析器中，第一步做的事情就是使用正则表达式来判断文本是否为带变量的文本，也就是检查文本中是否包含"),a("code",[t._v(t._s(t.xxx))]),t._v("这样的语法。如果是纯文本，则直接返回"),a("code",[t._v("undefined")]),t._v("；如果是带变量的文本，再进行二次加工。")]),t._v(" "),a("p",[t._v("如何解决带变量的文本呢："),a("strong",[t._v("使用正则表达式匹配出文本中的变量，先把变量左边的文本添加到数组中，然后把变量改成"),a("code",[t._v("_s(x)")]),t._v("这样的形式也添加到数组中。如果变量后面有变量则重复这动作。这时有一个数组，数组元素和文本顺序一致，此时将数组元素用"),a("code",[t._v("+")]),t._v("连起来变成字符串，就可以得到最后结果")]),t._v("。")])]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// _s(x)就是toString别名")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("val")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" val "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" val "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'object'")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("JSON")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("stringify")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("val"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("val"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br")])]),a("h2",{attrs:{id:"优化器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#优化器"}},[t._v("#")]),t._v(" 优化器")]),t._v(" "),a("p",[t._v("优化器的目标遍历"),a("code",[t._v("AST")]),t._v("，检测出所有静态子树（永远都不会发生变化的"),a("code",[t._v("DOM")]),t._v("节点）并打上标记。当"),a("code",[t._v("AST")]),t._v("中静态子树被打上标记后，每次重新渲染时就不需要为打上标记的静态节点创建新的虚拟节点，而是直接克隆已经存在的虚拟节点。"),a("strong",[t._v("静态子树是指的是那些在"),a("code",[t._v("AST")]),t._v("中永远都不会发生变化的节点")])]),t._v(" "),a("ul",[a("li",[t._v("标记静态子树有两点好处：\n"),a("ul",[a("li",[t._v("每次重新渲染时，不需要为静态子树创建新节点；")]),t._v(" "),a("li",[t._v("在虚拟"),a("code",[t._v("DOM")]),t._v("中打补丁"),a("code",[t._v("patching")]),t._v("的过程可以跳过。")])])])]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("每次重新渲染都会使用最新的状态生成一份全新的"),a("code",[t._v("VNode")]),t._v("与旧的"),a("code",[t._v("VNode")]),t._v("进行对比。而生成"),a("code",[t._v("VNode")]),t._v("的过程中，如果发现一个节点被标记为静态子树，那么除了首次渲染会生成节点之外，在重新渲染时并不会生成新的子节点树，而是克隆已存在的静态子树。")]),t._v(" "),a("p",[t._v("打补丁"),a("code",[t._v("patch")]),t._v("过程中，如果两个节点都是静态子树，就不需要进行对比与更新"),a("code",[t._v("DOM")]),t._v("的操作，直接跳过。因为静态子树是不可变的，不需要对比就知道不可能发生变化。")])]),t._v(" "),a("ul",[a("li",[t._v("优化器内部实现两个步骤：\n"),a("ul",[a("li",[t._v("在"),a("code",[t._v("AST")]),t._v("中找出所有静态节点并打上标记")]),t._v(" "),a("li",[t._v("在"),a("code",[t._v("AST")]),t._v("中找出所有静态根节点并打上标记")])])])]),t._v(" "),a("blockquote",[a("p",[t._v("如果一个节点下面所有子节点都是静态节点，并且父级是动态节点，那么它就是静态根节点。")])]),t._v(" "),a("h2",{attrs:{id:"代码生成器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#代码生成器"}},[t._v("#")]),t._v(" 代码生成器")]),t._v(" "),a("p",[t._v("代码生成器是模板函数编译最后一步，作用是将"),a("code",[t._v("AST")]),t._v("转换成渲染函数中的内容，这个内容可以称为代码字符串。")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("p title"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Berwin'")]),t._v(" @click"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'c'")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("p"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 生成的代码字符串")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('with(this){return _c(\'p\',{attrs: {"titile":"Berwin"}, on: {"clcik":c}}, [_v("1")]}')]),a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//格式化后")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("with")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("_c")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'p'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            attrs"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"title"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Berwin"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            on"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"click"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("_v")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br")])]),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("渲染函数之所以可以生成"),a("code",[t._v("vnode")]),t._v("，是因为代码字符串中会有很多函数调用（如"),a("code",[t._v("_c/_v")]),t._v("），这些函数是虚拟DOM提供创建"),a("code",[t._v("vnode")]),t._v("的方法。"),a("code",[t._v("vnode")]),t._v("有很多种类型，不同的类型对应不同的创建方法，所以代码字符串中的"),a("code",[t._v("_c/_v")]),t._v("其实都是创建"),a("code",[t._v("vnode")]),t._v("的方法，只是创建的"),a("code",[t._v("vnode")]),t._v("的类型不同。例如，"),a("code",[t._v("_c")]),t._v("可以创建元素类型的"),a("code",[t._v("vnode")]),t._v("，而"),a("code",[t._v("_v")]),t._v("可以创建文本类型的"),a("code",[t._v("vnode")]),t._v("。")]),t._v(" "),a("p",[t._v("代码字符串中的"),a("code",[t._v("_c")]),t._v("其实是"),a("code",[t._v("createElement")]),t._v("的别名。"),a("code",[t._v("createElement")]),t._v("是虚拟"),a("code",[t._v("DOM")]),t._v("中提供的方法，作用是创建虚拟节点，有三个参数：")]),t._v(" "),a("ul",[a("li",[t._v("标签名")]),t._v(" "),a("li",[t._v("一个包含模板相关属性的数据对象")]),t._v(" "),a("li",[t._v("子节点列表")])]),t._v(" "),a("blockquote",[a("p",[t._v("这也知道了渲染函数可以生成"),a("code",[t._v("VNode")]),t._v("的原因：渲染函数其实是执行了"),a("code",[t._v("createElement")]),t._v("，而"),a("code",[t._v("createElement")]),t._v("可以创建一个"),a("code",[t._v("VNode")])])])]),t._v(" "),a("blockquote",[a("p",[t._v("代码生成器其实就是字符串拼接的过程。通过递归"),a("code",[t._v("AST")]),t._v("来生成字符串，最先生成根节点，然后在子节点字符串生成后，将其拼接在根节点的参数中，子节点的子节点拼接在子节点的参数中，这样一层一层地拼接，直到最后拼接成完整的字符串。会将字符串在"),a("code",[t._v("with")]),t._v("中返回给调用者。")])]),t._v(" "),a("h2",{attrs:{id:"总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),a("p",[t._v("vue中的模板"),a("code",[t._v("template")]),t._v("无法被浏览器解析并渲染，因为这不属于浏览器的标准，不是正确的"),a("code",[t._v("HTML")]),t._v("语法，所有需要将"),a("code",[t._v("template")]),t._v("转化成一个"),a("code",[t._v("JavaScript")]),t._v("函数，这样浏览器就可以执行这一个函数并渲染出对应的"),a("code",[t._v("HTML")]),t._v("元素，就可以让视图跑起来了，这一个转化的过程，就成为模板编译。")]),t._v(" "),a("ul",[a("li",[t._v("模板编译又分三个阶段，解析"),a("code",[t._v("parse")]),t._v("，优化"),a("code",[t._v("optimize")]),t._v("，生成"),a("code",[t._v("generate")]),t._v("，最终生成可执行函数"),a("code",[t._v("render")]),t._v("。\n"),a("ul",[a("li",[a("code",[t._v("parse")]),t._v("阶段：使用大量的正则表达式对"),a("code",[t._v("template")]),t._v("字符串进行解析，将标签、指令、属性等转化为抽象语法树"),a("code",[t._v("AST")]),t._v("。")]),t._v(" "),a("li",[a("code",[t._v("optimize")]),t._v("阶段：遍历"),a("code",[t._v("AST")]),t._v("，找到其中的一些静态节点并进行标记，方便在页面重渲染的时候进行"),a("code",[t._v("diff")]),t._v("比较时，直接跳过这一些静态节点，优化"),a("code",[t._v("runtime")]),t._v("的性能。")]),t._v(" "),a("li",[a("code",[t._v("generate")]),t._v("阶段：将最终的"),a("code",[t._v("AST")]),t._v("转化为"),a("code",[t._v("render")]),t._v("函数字符串。")])])])])])}),[],!1,null,null,null);s.default=v.exports}}]);