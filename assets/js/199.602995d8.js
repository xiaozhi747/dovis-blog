(window.webpackJsonp=window.webpackJsonp||[]).push([[199],{522:function(s,t,a){"use strict";a.r(t);var n=a(33),e=Object(n.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"模块化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#模块化"}},[s._v("#")]),s._v(" 模块化")]),s._v(" "),a("blockquote",[a("p",[s._v("模块化解决了命名冲突问题，可以提高代码的复用率，提高代码的可维护性。")])]),s._v(" "),a("ul",[a("li",[s._v("模块化好处；\n"),a("ul",[a("li",[s._v("避免命名冲突")]),s._v(" "),a("li",[s._v("更好的分离，按需加载")]),s._v(" "),a("li",[s._v("更高复用性")]),s._v(" "),a("li",[s._v("高可维护性")])])])]),s._v(" "),a("h2",{attrs:{id:"模块化方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#模块化方式"}},[s._v("#")]),s._v(" 模块化方式")]),s._v(" "),a("ol",[a("li",[s._v("最初实现模块化方式使用函数进行封装，将不同功能的代码实现封装到不同的函数中，通常就是一个文件为一个模块，有自己的作用域，只向外暴露特定的变量和函数。"),a("strong",[s._v("这种方式容易发生命名冲突和数据不安全")])]),s._v(" "),a("li",[s._v("采取立即执行函数：立即执行函数中的匿名函数中有独立的词法作用域，避免了外界访问此作用域的变量。"),a("strong",[s._v("通过函数作用域解决了命名冲突，污染全局作用域的问题")]),s._v("，不过不能直接访问到内部的变量，是这种方式的一个弊端")])]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// module.js")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("window")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" name "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'linjiaheng'")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//暴露接口来访问数据")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("a")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[s._v("`")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("name:")]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[s._v("${")]),s._v("name"),a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[s._v("}")])]),a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[s._v("`")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 暴露接口")]),s._v("\n    window"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("myModule "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" a "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("window"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("script src"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"module.js"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("script"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("script"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\nmyModule"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("name "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'xixi'")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//无法访问")]),s._v("\nmyModule"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// linjiaheng")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("script"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br")])]),a("ol",{attrs:{start:"3"}},[a("li",[a("code",[s._v("CommonJS")]),s._v("规范")]),s._v(" "),a("li",[a("code",[s._v("AMD和CMD")])]),s._v(" "),a("li",[a("code",[s._v("ES6")])])]),s._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[s._v("TIP")]),s._v(" "),a("ul",[a("li",[s._v("模块化发展历程\n"),a("ul",[a("li",[s._v("早期假模块化时代")])]),s._v(" "),a("blockquote",[a("p",[s._v("早期借助函数作用域来模拟模块化，称其为函数模式。这样存在命名冲突的风险。这没有从根本上解决模块的问题，只是将代码分成了更小的函数单元而已。所以有了第二种模式：利用对象，实现命名空间的概念。这样会导致数据不安全，可以被开发者修改。通过立即执行函数构造一个私有作用域，再通过闭包将需要对外暴露的数据和接口输出。")])]),s._v(" "),a("ul",[a("li",[s._v("规范标准时代："),a("code",[s._v("CommonJS/AMD/CMD/UMD")])]),s._v(" "),a("li",[s._v("ES原生时代")])])])])]),s._v(" "),a("h2",{attrs:{id:"浏览器模块加载实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#浏览器模块加载实现"}},[s._v("#")]),s._v(" 浏览器模块加载实现")]),s._v(" "),a("ol",[a("li",[s._v("传统方法\n浏览器通过"),a("code",[s._v("script")]),s._v("标签加载脚本。这种方式会造成浏览器堵塞，所以浏览器允许脚本异步加载：")])]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("script src"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('""')]),s._v(" defer"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("script"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("script src"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('""')]),s._v(" async"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("script"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("blockquote",[a("p",[s._v("渲染引擎遇到这命令会开始下载外部脚本，但不会等他下载和执行，而是直接执行后面的命令。")])]),s._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[s._v("TIP")]),s._v(" "),a("p",[a("code",[s._v("defer")]),s._v("等到整个页面正常渲染结束才会执行，渲染完再执行。"),a("strong",[s._v("多个"),a("code",[s._v("defer")]),s._v("脚本，会按照在页面出现的顺序加载")]),s._v(" "),a("code",[s._v("async")]),s._v("一旦下载完成，渲染引擎就会中断渲染，执行这个脚本之后再继续渲染。下载完就执行。"),a("strong",[s._v("不能保证加载顺序")])])]),s._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[s._v("浏览器加载ES6模块时，要在"),a("code",[s._v("script")]),s._v("标签中加入"),a("code",[s._v("type='module'")]),s._v("。浏览器都是异步加载了，不会堵塞浏览器。等到整个页面渲染完再执行模块脚本，等同于添加了"),a("code",[s._v("defer")]),s._v("属性。"),a("code",[s._v("async")]),s._v("属性也可以在ES6中添加使用。")])]),s._v(" "),a("h2",{attrs:{id:"es6和commonjs模块的差异"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#es6和commonjs模块的差异"}},[s._v("#")]),s._v(" ES6和CommonJS模块的差异")]),s._v(" "),a("ul",[a("li",[s._v("CommonJS模块输出的是一个值的复制，ES6模块输出的是值的引用。")]),s._v(" "),a("li",[s._v("CommonJS模块是运行时加载，ES6模块是编译时输出接口")])]),s._v(" "),a("blockquote",[a("p",[s._v("第二个差异是因为CommonJS加载的是一个对象（"),a("code",[s._v("module.exports")]),s._v("）该对象只有在脚本运行结束时才会生成。而ES6模块不是对象，它的对外接口只是一种静态定义，在代码静态解析阶段就会生成。")]),s._v(" "),a("p",[s._v("第一个差异：值的复制，也就是说一旦输出一个值，模块内部的变化就不会影响到这个值，CommonJS会产生缓存。ES6的运行机制却不同，表现在遇到模块加载命令"),a("code",[s._v("import")]),s._v("就会生成一个只读引用，等到脚本真正执行时，再根据这个只读引用到被加载的模块中取值。"),a("strong",[s._v("ES6模块是动态引用，并且不会缓存值，模块里面的变量绑定其所在的模块")]),s._v("，由于ES6的输入的模块变量只是一个符号连接，所以这个变量为只读，对它重新赋值就会报错，类似定义了一个"),a("code",[s._v("const")]),s._v("变量。")])])])}),[],!1,null,null,null);t.default=e.exports}}]);